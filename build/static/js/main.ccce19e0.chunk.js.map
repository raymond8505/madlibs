{"version":3,"sources":["actions/creators.js","reducers/words.js","reducers/index.js","reducers/sentence.js","store.js","components/WordList.js","components/Main.js","App.js","index.js"],"names":["setWords","words","type","WORD_ACTIONS","SET","setSentence","sentence","SENTENCE_ACTIONS","state","arguments","length","undefined","action","rootReducer","combineReducers","store","createStore","WordList","props","_this","Object","classCallCheck","this","_super","call","react_default","a","createElement","className","label","map","word","i","key","React","Component","defaultProps","Main","urlField","createRef","sentenceInput","shareField","defaultWordsURL","getSheetCode","shareURL","codeMatch","match","Error","parseWords","respJSON","cb","console","log","table","labels","rows","forEach","rowObj","r","c","cell","push","v","setState","parsingSheet","makeSheetJSONURL","code","handleGenerateSentence","e","persist","current","value","replaceWords","findVariables","variable","replacement","pickWord","replace","allWords","getState","varWords","Math","round","random","makeShareURL","sheetURL","window","location","origin","encodeURIComponent","getSentenceFromURL","sentenceMatch","search","decodeURIComponent","getSheetFromURL","sheetMatch","handleGetWordsClick","sheetCode","jsonURL","fetchSheet","outputWordLists","keys","wordWords","components_WordList","handleSentenceKeyUp","url","_this2","fetch","then","resp","Promise","resolve","text","jsonMatch","JSON","parse","sharedSheet","readOnly","ref","placeholder","onClick","disabled","onKeyUp","App","connect","dispatch","bindActionCreators","actionCreators","rootElement","document","getElementById","ReactDOM","render","es","StrictMode","src_App"],"mappings":"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","file":"static/js/main.ccce19e0.chunk.js","sourcesContent":["export function setWords(words) {\r\n  return {\r\n    type: WORD_ACTIONS.SET,\r\n    words: words\r\n  };\r\n}\r\n\r\nexport function setSentence(sentence)\r\n{\r\n  return {\r\n    type : SENTENCE_ACTIONS.SET,\r\n    sentence : sentence\r\n  }\r\n}\r\n\r\nexport const WORD_ACTIONS = {\r\n  SET: \"SET_WORDS\"\r\n};\r\n\r\nexport const SENTENCE_ACTIONS = {\r\n  SET : \"SET_SENTENCE\"\r\n}\r\n","import {WORD_ACTIONS} from \"../actions/creators\";\r\n\r\nfunction words(state = [], action) {\r\n\r\n  switch(action.type)\r\n  {\r\n    case WORD_ACTIONS.SET:\r\n\r\n      state = action.words;\r\n      break;\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nexport default words;\r\n","import { combineReducers } from \"redux\";\r\nimport words from \"./words\";\r\nimport sentence from \"./sentence\";\r\n\r\nconst rootReducer = combineReducers({\r\n  words,\r\n  sentence\r\n});\r\n\r\nexport default rootReducer;\r\n","import {SENTENCE_ACTIONS} from \"../actions/creators\";\r\n\r\nexport default function sentence(state = [], action) {\r\n  \r\n  switch(action.type)\r\n  {\r\n    case SENTENCE_ACTIONS.SET :\r\n      state = action.sentence;\r\n      break;\r\n  }\r\n\r\n  return state;\r\n}\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers/index\";\r\n\r\nconst defaultState = {\r\n  words: {},\r\n  sentence: \"The {adjective} {noun} {verb} the {adjective} {noun}\"\r\n};\r\n\r\nconst store = createStore(rootReducer, defaultState);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nclass WordList extends React.Component\r\n{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    static propTypes = {};\r\n    static defaultProps = {}\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <dl className=\"WordList\">\r\n                <dt className=\"WordList__label\">{this.props.label}</dt>\r\n                <dd>\r\n                    <ul>\r\n                        {this.props.words.map((word,i) => {\r\n                                            return <li key={i}>{word}</li>\r\n\r\n                                                    })}\r\n                    </ul>\r\n                </dd>\r\n            </dl>);\r\n    }\r\n}\r\n\r\nexport default WordList;","import React from \"react\";\r\nimport store from \"../store\";\r\nimport WordList from \"./WordList\";\r\nimport { setSentence } from \"../actions/creators\";\r\n\r\nclass Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      parsingSheet : false\r\n    };\r\n  }\r\n\r\n  urlField = React.createRef();\r\n  sentenceInput = React.createRef();\r\n  shareField = React.createRef();\r\n\r\n  //https://docs.google.com/spreadsheets/d/1lTowhCvMNxdg8srQREJIEl8yEJxSo4Hh58YlODC-LIg/gviz/tq?gid=0\r\n  defaultWordsURL =\r\n    \"https://docs.google.com/spreadsheets/d/1lyGAciRMlbfIJSA4FHXTKlPfWrL3BMipitoNxnPU164/edit?usp=sharing\";\r\n\r\n  getSheetCode = shareURL => {\r\n    let codeMatch = shareURL.match(/d\\/([^/]+)\\//i);\r\n\r\n    if (codeMatch !== null && codeMatch.length > 1) {\r\n      return codeMatch[1];\r\n    } else {\r\n      throw new Error(shareURL + \" is not a valid google sheets url\");\r\n    }\r\n  };\r\n\r\n  parseWords = (respJSON,cb) => {\r\n    console.log(respJSON);\r\n\r\n    let words = {};\r\n    let table = respJSON.table;\r\n    let labels = [];\r\n\r\n    table.rows.forEach((rowObj,r) => {\r\n\r\n      let row = rowObj.c;\r\n\r\n      row.forEach((cell,c) => {\r\n\r\n        if(r === 0)\r\n        {\r\n          labels.push(cell.v);\r\n        }\r\n        else\r\n        {\r\n          let label = labels[c];\r\n\r\n          if(words[label] === undefined)\r\n          {\r\n            words[label] = [];\r\n          }\r\n\r\n          if(cell !== null && cell.v !== null)\r\n            words[label].push(cell.v);\r\n        }\r\n      });\r\n\r\n      \r\n    });\r\n\r\n    this.props.setWords(words);\r\n    this.setState({parsingSheet : false});\r\n    \r\n    if(cb) cb();\r\n  };\r\n\r\n  makeSheetJSONURL = code =>\r\n    \"https://docs.google.com/spreadsheets/d/\" + code + \"/gviz/tq?gid=0\";\r\n\r\n  handleGenerateSentence = e => {\r\n    \r\n    e.persist();\r\n\r\n    let sentence = this.sentenceInput.current.value;\r\n\r\n    sentence = this.replaceWords(sentence);\r\n\r\n    this.props.setSentence(sentence);\r\n\r\n  };\r\n\r\n  replaceWords = (sentence) => {\r\n\r\n    return this.findVariables(sentence);\r\n\r\n  }\r\n\r\n  findVariables = (sentence) => {\r\n\r\n    let vars = sentence.match(/\\{[^}]+\\}/gi);\r\n\r\n    vars.forEach(variable => {\r\n\r\n      let replacement = this.pickWord(variable);\r\n\r\n      sentence = sentence.replace(variable,replacement);\r\n\r\n      console.log(variable,replacement);\r\n    });\r\n\r\n    return sentence;\r\n  }\r\n\r\n  pickWord = (variable) => {\r\n\r\n    let label = variable.replace(/[\\{,\\}]/g,'');\r\n\r\n    let allWords = store.getState().words;\r\n\r\n    if(allWords != {})\r\n    {\r\n      let varWords = allWords[label];\r\n\r\n      if(varWords && varWords.length > 0)\r\n      {\r\n        let i = Math.round(Math.random() * (varWords.length - 1));\r\n        return varWords[i];\r\n      }\r\n    }\r\n\r\n    return variable;\r\n  }\r\n\r\n  fetchSheet(url,cb) {\r\n    fetch(url).then(resp => {\r\n      let promise = Promise.resolve(resp);\r\n\r\n      resp.text().then(text => {\r\n        //so hacky\r\n        let jsonMatch = text.match(\r\n          /google\\.visualization\\.Query\\.setResponse\\((.+)\\)/\r\n        );\r\n\r\n        if (jsonMatch !== null && jsonMatch.length > 1) {\r\n          this.parseWords(JSON.parse(jsonMatch[1]),cb);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  makeShareURL = (sheetURL,sentence = '') => {\r\n\r\n    return window.location.origin + '?sheet=' + encodeURIComponent(sheetURL) + '&sentence=' + encodeURIComponent(sentence); \r\n  }\r\n\r\n  getSentenceFromURL = () => {\r\n    \r\n    let sentenceMatch = window.location.search.match(/sentence=([^&]+)/);\r\n\r\n    if(sentenceMatch !== null && sentenceMatch.length > 1)\r\n    {\r\n      return decodeURIComponent(sentenceMatch[1]);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  getSheetFromURL = () => {\r\n\r\n    let sheetMatch = window.location.search.match(/sheet=([^&]+)/);\r\n\r\n    if(sheetMatch !== null && sheetMatch.length > 1)\r\n    {\r\n      return decodeURIComponent(sheetMatch[1]);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    //this.urlField.current.value = this.defaultWordsURL;\r\n\r\n    let sharedSheet = this.getSheetFromURL() || this.defaultWordsURL;\r\n\r\n    //this.shareField.current.value = this.makeShareURL(this.defaultWordsURL);\r\n\r\n    let sentence = this.getSentenceFromURL() || store.getState().sentence;\r\n\r\n    this.sentenceInput.current.value = sentence;\r\n\r\n    this.urlField.current.value = sharedSheet;\r\n    this.shareField.current.value = this.makeShareURL(sharedSheet,sentence);\r\n    this.handleGetWordsClick();\r\n    \r\n  }\r\n\r\n  handleGetWordsClick = e => {\r\n\r\n    let sheetCode = this.getSheetCode(this.urlField.current.value);\r\n    let jsonURL = this.makeSheetJSONURL(sheetCode);\r\n\r\n    this.setState({parsingSheet : true});\r\n\r\n    this.fetchSheet(jsonURL);\r\n  }\r\n\r\n  outputWordLists = () => {\r\n\r\n    let words = store.getState().words;\r\n\r\n    return Object.keys(words).map(label => {\r\n      \r\n      let wordWords = words[label];\r\n\r\n      return <WordList key={label} label={label} words={wordWords} />;\r\n    })\r\n  }\r\n\r\n  handleSentenceKeyUp = e => {\r\n\r\n    this.shareField.current.value = this.makeShareURL(\r\n      this.urlField.current.value,\r\n      this.sentenceInput.current.value\r\n    );\r\n  }\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"Main\">\r\n        <h1>Mad Libs</h1>\r\n\r\n        <div className=\"Main__share-shell\">\r\n          <label>Share URL:</label><input className=\"Main__share-field\" readOnly ref={this.shareField} />\r\n        </div>\r\n\r\n        <div className=\"Main__field-shell\">\r\n          <input className=\"Main__url-field\" type=\"text\" ref={this.urlField} placeholder=\"Google Sheet URL\" />\r\n          <button \r\n            type=\"button\" \r\n            className=\"Main__get-words-btn\"\r\n            onClick={this.handleGetWordsClick}\r\n            disabled={this.state.parsingSheet}>\r\n            Get Words\r\n          </button>\r\n        </div>\r\n\r\n        <h2>Sentence Output</h2>\r\n\r\n        <textarea className=\"Main__sentence-input\" placeholder=\"The {adjective} {noun} {verb} the {adjective} {noun}\" ref={this.sentenceInput} onKeyUp={this.handleSentenceKeyUp} />\r\n        <button\r\n          className=\"Main__generate-sentence\"\r\n          onClick={this.handleGenerateSentence}\r\n        >\r\n          Generate Sentence\r\n        </button>\r\n\r\n        <div className=\"Main__sentence\">\r\n          {store.getState().sentence}\r\n        </div>\r\n\r\n        <h2>Words</h2>\r\n\r\n        <div className=\"Main__words\">\r\n\r\n          {this.outputWordLists()}\r\n        </div>\r\n\r\n        <div className=\"Main__instructions\">\r\n          <h2>Instructions</h2>\r\n\r\n          <ol>\r\n            <li>Create a Google Sheet</li>\r\n            <li>Add as many columns as you want with the first row being the labels you'll use in your sentence (noun,verb,adjective,etc)</li>\r\n            <li>Add as many words to each column as you want</li>\r\n            <li>Set the sharing permissions on the sheet that everyone with a link can edit</li>\r\n            <li>Paste the sheet's link into the <em>Google Sheet URL</em> field and click <em>Get Words</em></li>\r\n            <li>If you did everything right, the word list will populate</li>\r\n            <li>Write your sentence, marking words you want to randomize from their list with curly braces <strong>{`{}`}</strong>, ex: {`The {adjective} {noun} jumps over the {adjective} {noun}`}</li>\r\n            <li>Click <em>Generate Sentence</em> to generate a sentence with random new words</li>\r\n          </ol>\r\n\r\n          <h3>Troubleshooting</h3>\r\n          <ul>\r\n            <li>\r\n              <strong>Nothing's happening</strong><br />\r\n              You probably forgot to hit <strong>get words</strong> or there's an issue with your Google Sheet\r\n            </li>\r\n            <li>\r\n              <strong>One or more words aren't replacing</strong><br />\r\n              Check your spelling in the sentence as well as in the sheet ex: {`{nouns} in the sentence, but noun in the sheet`} \r\n            </li>\r\n          </ul>\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import Main from \"./components/Main\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport * as actionCreators from \"./actions/creators\";\n\nimport \"./css/styles.css\";\n\nexport function mapStateToProps(state) {\n  return {\n    words: state.words,\n    sentence: state.sentence\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(actionCreators, dispatch);\n}\n\nconst App = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Main);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  rootElement\n);\n"],"sourceRoot":""}